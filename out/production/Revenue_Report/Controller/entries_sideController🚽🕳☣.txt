

Crap: AK-763-9907



//         FXMLLoader loadsgre = new FXMLLoader();
//        loadsgre.setLocation(getClass().getResource( "/Views/fxml/entries_side.fxml"));
//        loadsgre.setController(this);
//         try {
//         loadsgre.load();            
//     } catch (IOException exception) {
//         throw new RuntimeException(exception);
//     }


        stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
          public void handle(WindowEvent we) {
              System.out.println("Stage is closing");
          }
      });


final char seperatorChar = '/';
final Pattern p = Pattern.compile("[0-9" + seperatorChar + "]*");
textField.setTextFormatter(new TextFormatter<>(c -> {
    if (!c.isContentChange()) {
        return c; // no need for modification, if only the selection changes
    }
    String newText = c.getControlNewText();
    if (newText.isEmpty()) {
        return c;
    }
    if (!p.matcher(newText).matches()) {
        return null; // invalid change
    }

    // invert everything before the range
    int suffixCount = c.getControlText().length() - c.getRangeEnd();
    int digits = suffixCount - suffixCount / 4;
    StringBuilder sb = new StringBuilder();

    // insert seperator just before caret, if necessary
    if (digits % 3 == 0 && digits > 0 && suffixCount % 4 != 0) {
        sb.append(seperatorChar);
    }

    // add the rest of the digits in reversed order
    for (int i = c.getRangeStart() + c.getText().length() - 1; i >= 0; i--) {
        char letter = newText.charAt(i);
        if (Character.isDigit(letter)) {
            sb.append(letter);
            digits++;
            if (digits % 3 == 0) {
                sb.append(seperatorChar);
            }
        }
    }

    // remove seperator char, if added as last char
    if (digits % 3 == 0) {
        sb.deleteCharAt(sb.length() - 1);
    }
    sb.reverse();
    int length = sb.length();

    // replace with modified text
    c.setRange(0, c.getRangeEnd());
    c.setText(sb.toString());
    c.setCaretPosition(length);
    c.setAnchor(length);

    return c;
}))

stage.initStyle(StageStyle.UTILITY);




//     private final ObjectProperty<Node> node = new SimpleObjectProperty<>();
//
//    public ObjectProperty<Node> nodeProperty() {
//        return node ;
//    }




REVENUE_REPORT

//        appController appcontroller = (appController)firstLoader.getController();
//        Parent root = null; 
//        appController app = new appController();
//        stage.setScene(new Scene(app));



APP_CONTROLLER

//          FXMLLoader firstLoader = new FXMLLoader(getClass().getResource("/Views/fxml/app.fxml"));
//          firstLoader.setRoot(this);
//        firstLoader.setController(this);
//         
//          try {
//         firstLoader.load();            
//     } catch (IOException exception) {
//         throw new RuntimeException(exception);
//         }

//    public appController(Parent root) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }
    
//    public ObjectProperty<Node> displayedViewProperty() {
//        return sborder_pane.centerProperty;
//    }

//    public static void moveToCenter(URL ui, BorderPane borderpane){
//try {
//        Parent root = FXMLLoader.load(ui);
//        borderpane.setCenter(root);
//    } catch (IOException ex) {
//        Logger.getLogger(ChangeScenes.class.getName()).log(Level.SEVERE, null, ex);
//    }
//}   
          //        entries_sideController entries = loadsgre.<entries_sideController>getController();
//        entries.nodeProperty().set(centerPane);








org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8




<!--						<datasetParameter name = "DAY1">-->
<!--								<datasetParameterExpression>-->
<!--									[CDATA[$P{DAY1}]]-->
<!--								</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "DAY2">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{DAY2}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "DAY3">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{DAY3}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "DAY4">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{DAY4}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "DAY5">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{DAY5}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "DAY6">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{DAY6}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "DAY7">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{DAY7}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day1">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day1}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day2">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day2}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day3">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day3}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day4">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day4}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day5">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day5}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day6">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day6}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->
<!--						<datasetParameter name = "day7">-->
<!--							<datasetParameterExpression>-->
<!--								[CDATA[$P{day7}]]-->
<!--							</datasetParameterExpression>-->
<!--						</datasetParameter>-->







<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>


<TableView fx:id="quarterMastItemsTable" maxHeight="-Infinity" maxWidth="-Infinity" prefHeight="451.0" prefWidth="651.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1">
   <columns>
      <TableColumn fx:id="revenueItems" maxWidth="865.0000076293945" prefWidth="848.0000076293945" text="REVENUE ITEMS">
         <columns>
            <TableColumn fx:id="revenueItem" prefWidth="126.0" text="REVENUE ITEM " />
            <TableColumn fx:id="year" prefWidth="75.0" text="Year: #">
               <columns>
                  <TableColumn fx:id="quarter" prefWidth="618.0" text="QUARTER #">
                     <columns>
                        <TableColumn fx:id="month1" prefWidth="165.0" text="MONTH" />
                        <TableColumn fx:id="month2" prefWidth="165.0" text="MONTH" />
                        <TableColumn fx:id="month3" prefWidth="165.0" text="MONTH" />
                        <TableColumn fx:id="totalAmount" prefWidth="100.0" text="TOTAL AMOUNT" />
                     </columns>
                  </TableColumn>
               </columns>
            </TableColumn>
         </columns>
      </TableColumn>
   </columns>
   <columnResizePolicy>
      <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
   </columnResizePolicy>
</TableView>



Tadaaaaaa: myMONdevices.7



DELETE FROM `collection_payment_entries` WHERE `pay_revCenter` = 'Environmental' AND `GCR` = '352654' AND `payment_type` = 'Cheque'

Head of Cyber Security
Posting Country:  Ghana
Date Posted:  31-Mar-2021
Full Time / Part Time:  Full Time
Contract Type:  Permanent

At Vodafone, we’re working hard to build a better future. A more connected, inclusive and sustainable world. As a dynamic global community, it's our human spirit, together with technology, that empowers us to achieve this.

We challenge and innovate in order to connect people, businesses, and communities across the world. Delighting our customers and earning their loyalty drive us, and we experiment, learn fast and get it done, together.

With us, you can be truly be yourself and belong, share inspiration, embrace new opportunities, thrive, and make a real difference.

Role Purpose
The successful person will act as the local market lead for Cyber Security, responsible for all security elements within the networks and IT Function.
He/She will work with the local CTO and the Vodafone Regional Cyber Security Lead to ensure adequate budget, resource and management focus is on cyber security risks and will be responsible for delivering a fully transparent budget planning and purchasing process for spend related to cyber security activities.
In addition, the Head of Cyber Security will be responsible for ensuring the risks for the local market, in terms of cyber security, are effectively managed and will drive forward the CSB strategic program within the local market with the technology support.
Again, the successful candidate will act as a local control and facilitation point for cyber security related tasks and activities, which are executed in other parts of the local organisation in order to ensure a reliable end to end chain of responsibility from group to local technical execution.
He/She will report to the Vodafone Regional Cyber Security Lead with a dotted matrix reporting line to the local market Technology Director. The Head of Cyber Security plays an active role as a member of the local Technology Leadership Team, is able to understand business priorities and to get the right balance between local and global strategy delivery.


Duties and Responsibilities
Act as the single point of contact for the local market Cyber Security Community liaising with the Global Cyber Security Functions
Responsible for the effective implementation of security in all local products and services within the local market, ensuring that all risks are effectively managed or mitigated
Manage all staff working on technology security within the local market and region where appropriate
Responsible for effectively capturing and monitoring the local market Cyber Security risks and managing these on the group risk management platform
Responsible for ensuring all cyber security and risk management processes are optimised for maximum efficiency
Responsible for obtaining and maintaining operational excellence within the local market and achieving and maintain IS027001 standard for the local operations and data centres where appropriate
Responsible for ensuring that local technology security is effectively resourced in terms of budget and people to effectively manage the local risk, working with the CTO and Vodafone Regional Cyber Security Lead
Acts as the final security escalation point within the local market for all cyber security operational issues
Acts as the Sponsor for the global security programmes within the local market
Works closely with the local and group corporate security function and the local and group internal audit functions to ensure adequate segregation of duties and effective end to end security for the local market
Responsible for ensuring all security technology purchases or solutions are in line with the group strategy
Identify and promote industry best practice for technology security, and security risk management for the local market
Approve expenditure against cyber security OPEX and CAPEX budgets within the local market
Qualification and Experience
• Must be Educated to Degree level or equivalent in Computer Science, Engineering or IT
• 10-15 years of experience, 5+ Years working in a Telecommunications/Banking or Data network or related service industry
• Must have Excellent Network and IT security skills
• Skilled in relationship management – getting closer to the customer
• Stakeholder management at senior levels
• Interpersonal skills, enthusiastic, reliable, team player and committed to Vodafone security strategic goals delivery actively.


Technical Skills/Experience:
• Understanding of delivery frameworks:
• ISO 27001/SOX - PCI DSS – GDPR knowledge
• Project Management
• Change Management
• Incident response/ Supplier Risk Risk Assessment/Compliance and Assurance
• Experience with the following technologies:
• Cloud AWS, Azure, and others
• WAN technologies
• DNS & WAF DDoS Protection
• Professional Certification in area of inforamtion security
• Experience in leading roles into SecbyDesign processes

Vodafone is committed to attracting, developing and retaining the very best people by offering a motivating and inclusive workplace in which talent is truly recognised and rewarded. We are committed to promoting Inclusion for All with the belief that diversity plays an important role in the success of our business. We actively encourage everyone to consider becoming a part of our journey.





FP & A Specialist
Posting Country:  Ghana
Date Posted:  30-Mar-2021
Full Time / Part Time:  Full Time
Contract Type:  Permanent
At Vodafone, we’re working hard to build a better future. A more connected, inclusive and sustainable world. As a dynamic global community, it's our human spirit, together with technology, that empowers us to achieve this.

We challenge and innovate in order to connect people, businesses, and communities across the world. Delighting our customers and earning their loyalty drive us, and we experiment, learn fast and get it done, together.

With us, you can be truly be yourself and belong, share inspiration, embrace new opportunities, thrive, and make a real difference.

Role Profile
The FP&A Specialist will be responsible for supporting the quantitative and qualitative analysis of all operational aspects of the business in order to evaluate the company’s progress towards achieving its goals and to map out future objectives and plans The Role involves but not limited to review of actual results against plan, accurate forecasting of business drivers and leading to the consolidation and review of the corporate budget over the short term and long range planning cycles.

Key Accountabilities


Monthly Rolling Forecast: lead the consolidation and review of inputs from FDS for revenue and direct costs forecast and overall submission of P&L & OFCF into Vodafone Integrated Planning (VIP) tool
Management Performance Review Pack: Perform variance analysis to explain differences in performance (actual vs budget) & ensuring timely completion of Pack for EXCO review
Month End Close (MEC) – lead the consolidation and review of the P&L with FDS & Finance Leadership Team (FLT)
Work with business segments (FDS) to prepare annual & long-range plan for revenue and direct cost budgets and consolidate into one overall corporate budget including submission into relevant systems/tools (HFM)
Techinical/Proffesional Qualifications
Strong quantitative ability
Excellent written and oral communication skills
Deep thinker able to view a problem from different angles
Ability to handle detail whilst retaining sense of the big picture
Good Stakeholder Management skills


Core Competencies
The candidate must have demonstrated at least 3 years’ experience in a challenging working environment
Prior experience in telecoms industry is a plus but not a requirement
Proactive, with strong personal drive
The candidate must have good communication skills and be able to present to senior leaders in the business.
Vodafone is committed to attracting, developing and retaining the very best people by offering a motivating and inclusive workplace in which talent is truly recognised and rewarded. We are committed to promoting Inclusion for All with the belief that diversity plays an important role in the success of our business. We actively encourage everyone to consider becoming a part of our journey.



Roaming, ILD & Messaging Specialist
Posting Country:  Ghana
Date Posted:  27-Mar-2021
Full Time / Part Time:  Full Time
Contract Type:  Permanent

At Vodafone, we’re working hard to build a better future. A more connected, inclusive and sustainable world. As a dynamic global community, it's our human spirit, together with technology, that empowers us to achieve this.

We challenge and innovate in order to connect people, businesses, and communities across the world. Delighting our customers and earning their loyalty drive us, and we experiment, learn fast and get it done, together.

With us, you can be truly be yourself and belong, share inspiration, embrace new opportunities, thrive, and make a real difference.

Role Purpose
The ILD, Roaming & Messaging Specialist will be responsible for managing the Roaming portfolio.  The holder will be responsible for all engagements with roaming partners, messaging partners, commercial performance of the portfolio.


Duties and Responsibilities
• Design strategy to increase roaming footprint.
• Leverage on Roaming footprint and International as foothold in attracting and growing Mid to High Value Segments
• Conduct regular market research to maintain high technological and market value level in comparison to world leading International & Roaming Services offering
• In conjunction with CVM and the Marketing Communication teams, ensure advertising (ATL/BTL) campaigns clearly identifies the correct propositions to ensure targeted uptake and revenue
• Carry out training to ensure that Sales and Sales Support functions are adequately trained on International & Roaming Services
• Work with VRS to ensure roaming cost and revenue are properly booked
• Work with VRS to aggressively work on roaming coverage expansion
• Ensure timely implementation of MSC/STP database configurations and software changes with new Roaming Networks.
• Establish and maintain strong business relationships with international carriers, local operators, aggregators, SMS hubs and resellers to grow and strengthen our bilateral route connectivity and clientele
• Carry out all necessary studies, analyses and cost calculations with the aim of minimizing the cost of international products and services to improve margin


Qualification and Experience
• University Degree in Telecommunication Engineering, Computer Science, Economics & Marketing
• 3-5 years of varied experience, 3-5 within Telecom Industry or 3-5 years in Marketing/Commercial Department.
• Experience in Telecoms with Knowledge and experience in managing carriers, roaming business is a prerequisite
• Must have knowledge of technology platforms
• Must have experience of product development and management life cycles
• Excellent Data analysis and Excel skills
• Sound knowledge of Campaign Management
• Strong Analytical, statistical and Presentation skills
• Must be committed to timely and excellent delivery with “first time right” mind-set.

Vodafone is committed to attracting, developing and retaining the very best people by offering a motivating and inclusive workplace in which talent is truly recognised and rewarded. We are committed to promoting Inclusion for All with the belief that diversity plays an important role in the success of our business. We actively encourage everyone to consider becoming a part of our journey.



BankUpdate in update entries(
                        if (payType.equals("Cheque") || payType.equals("Cheque Deposit Slip")){
                            saved = false;
                            Main st = new Main();
                                FXMLLoader bankDetails = new FXMLLoader();
                                bankDetails.setLocation(getClass().getResource("/Views/fxml/Bank_DetailsUpdate.fxml"));
                                bankDetails.setController(new BankDetailsUpdateController());
                                BankDetailsUpdateController bnkDtls = (BankDetailsUpdateController)bankDetails.getController();
                                bnkDtls.setAppController(this);
                                Parent root = bankDetails.load();
                                Scene s = new Scene(root);
                                Stage stg = new Stage();
                                bnkDtls.setStage(stg);
                                stg.initModality(Modality.APPLICATION_MODAL);
                                stg.initOwner(st.stage);
                                stg.initStyle(StageStyle.UTILITY);
                                stg.setScene(s);
                                stg.show();
                                stg.setOnCloseRequest(new EventHandler<WindowEvent>() {
                                    public void handle(WindowEvent we) {
                                        Alert closeConfirmation = new Alert(
                                                Alert.AlertType.CONFIRMATION,
                                                "Are you sure you want to exit?"
                                        );
                                        Button exitButton = (Button) closeConfirmation.getDialogPane().lookupButton(
                                                ButtonType.OK
                                        );
                                        Button cancelButton = (Button) closeConfirmation.getDialogPane().lookupButton(
                                                ButtonType.CANCEL
                                        );
                                        exitButton.setText("Yes");
                                        cancelButton.setText("No");
                                        closeConfirmation.setHeaderText("Confirm Exit");
                                        if(!bnkDtls.getTableView().getItems().isEmpty()) {
                                            closeConfirmation.setContentText("Are you sure you want to exit without saving cheque details? ");
                                            System.out.println(saved);
                                        }else{
                                            closeConfirmation.setContentText("Are you sure you want to Exit");
                                            saved = true;
                                            System.out.println(saved);
                                        }
                                        closeConfirmation.initModality(Modality.APPLICATION_MODAL);
                                        closeConfirmation.initOwner(stg);
                                        Optional<ButtonType> closeResponse = closeConfirmation.showAndWait();
                                        if (!ButtonType.OK.equals(closeResponse.get())) {
                                            we.consume();
                                        }else{
                                            GCR_ID.clear();

                                        }
                                    }
                                });
                            if (!saved){
                                stmnt = con.prepareStatement("UPDATE `collection_payment_entries` SET  " +
                                        "`Date`= '"+payDate+"',`GCR`= '"+payGCR+"'," +
                                        "`Month` = '"+payMonth+"', `payment_type` = '"+payType+"'" +
                                        ",`Amount` = '"+payAmount+"', `Year` = '"+payYear+"' WHERE   " +
                                        "`pay_ID`= '"+entry_ID+"' AND `pay_revCenter`= '"+revCenter+"' ");
                                stmnt.executeUpdate();
                                resetPaymentEntries();
                                loadPaymentTable();
                                Condition = false;
                            }
                            else {
                                Alert alert = new Alert(Alert.AlertType.WARNING);
                                alert.setTitle("Warning Dialog");
                                alert.setHeaderText("Update Unsuccessful");
                                alert.setContentText("Please input '"+payType+"' details.");
                                alert.showAndWait();
                                loadPaymentTable();
                                Condition = false;
                            }
                            }else {}
).
bc5qpejl


PASSWORD FOR EDNA OPOKU GOOGLE ACCOUNT: ednaopoku105@gmail.com
edd!ebab7

AND `first_serial` = '"+acFirstSerial+"' AND `last_serial` = '"+acLastSerial+"'

KEityibBetN8-ebit account


/***
 * Retrieving Revenue Items from database per week selected
 * Put Revenue Items into a list for later use
 *
         if (cmbReportCent.getSelectionModel().getSelectedItem().equals("PROPERTY RATE ALL")){
                 stmnt = con.prepareStatement("SELECT `item_Sub`   FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `revenue_centers`.`revenue_category` = 'PROPERTY RATE SECTION'  AND   `daily_entries`.`revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueWeek` = '"+cmbReportWeek.getSelectionModel().getSelectedItem()+"' GROUP BY `item_Sub` ");
                 }else if (cmbReportCent.getSelectionModel().getSelectedItem().equals("PROPERTY RATE SUB-METROS")){
                 stmnt = con.prepareStatement("SELECT `item_Sub`   FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `CenterID` = 'K0201' OR `CenterID` = 'K0202' OR `CenterID` = 'K0203' OR `CenterID` = 'K0204' OR `CenterID` = 'K0205' AND   `daily_entries`.`revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueWeek` = '"+cmbReportWeek.getSelectionModel().getSelectedItem()+"' GROUP BY `item_Sub`");
                 }else {
                 stmnt = con.prepareStatement("SELECT `item_Sub`   FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `revenue_centers`.`revenue_center` = '" + cmbReportCent.getSelectionModel().getSelectedItem() + "'  AND   `daily_entries`.`revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueWeek` = '"+cmbReportWeek.getSelectionModel().getSelectedItem()+"' GROUP BY `item_Sub`");
                 }
                 ResultSet rs = stmnt.executeQuery();

                 ObservableList<String> Item = FXCollections.observableArrayList();//List to Store revenue items which have entries for the specified week
        while(rs.next()){//looping through the retrieved revenueItems result set
        Item.add(rs.getString("item_Sub"));//adding revenue items to list
        }
        /***
         * Retrieving revenue items and their respective Amount and Dates in an ordered form by revenueItem
         *
         *
        if (cmbReportCent.getSelectionModel().getSelectedItem().equals("PROPERTY RATE ALL")){
        stmnt =con.prepareStatement("SELECT `item_Sub`, `daily_entries`.`revenueAmount`, `daily_entries`.`revenueDate` FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `revenue_centers`.`revenue_category` = 'PROPERTY RATE SECTION' AND `daily_entries`.`revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueWeek` = '"+cmbReportWeek.getSelectionModel().getSelectedItem()+"' ORDER BY `item_category`");
        }else if (cmbReportCent.getSelectionModel().getSelectedItem().equals("PROPERTY RATE SUB-METROS")){
        stmnt =con.prepareStatement("SELECT `item_Sub`, `daily_entries`.`revenueAmount`, `daily_entries`.`revenueDate` FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `daily_entries`.`daily_revCenter` = 'K0201' OR `daily_entries`.`daily_revCenter` = 'K0202' OR `daily_entries`.`daily_revCenter` = 'K0203' OR `daily_entries`.`daily_revCenter` = 'K0204' OR `daily_entries`.`daily_revCenter` = 'K0205' AND `daily_entries`.`revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueWeek` = '"+cmbReportWeek.getSelectionModel().getSelectedItem()+"' ORDER BY `item_category`");
        }else {
        stmnt =con.prepareStatement("SELECT `item_Sub`, `daily_entries`.`revenueAmount`, `daily_entries`.`revenueDate` FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `revenue_centers`.`revenue_center` = '" + cmbReportCent.getSelectionModel().getSelectedItem() + "'  AND   `daily_entries`.`revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_entries`.`revenueWeek` = '"+cmbReportWeek.getSelectionModel().getSelectedItem()+"' ORDER BY `item_category`");
        }
        ResultSet rt = stmnt.executeQuery();
        Map<String, Map<String, ArrayList<Float>>> forEntry = new HashMap<>();//HashMap to store entries for tableview


        //HashMap to store revenue Amounts on their respective dates
//        ArrayList<String> AmountDate = new ArrayList<>(rowDate);

        Item.forEach((Items) -> {
        forEntry.put(Items,  new HashMap<>());
        });
        while(rt.next()){
        float object2 = rt.getFloat("revenueAmount");
        for( String Dates : rowDate){
        for(Entry<String, Map<String, ArrayList<Float>>>Items : forEntry.entrySet()){
        if (Items.getKey().equals(rt.getString("item_Sub"))  && Dates.equals(rt.getString("revenueDate")) ){
        if(forEntry.containsKey(rt.getString("item_Sub")) && !forEntry.get(rt.getString("item_Sub")).containsKey(rt.getString("revenueDate"))){
        forEntry.get(rt.getString("item_Sub")).put(rt.getString("revenueDate"), new ArrayList<>());
        forEntry.get(rt.getString("item_Sub")).get(rt.getString("revenueDate")).add(object2);
        }else if(forEntry.containsKey(rt.getString("item_Sub")) && forEntry.get(rt.getString("item_Sub")).containsKey(rt.getString("revenueDate"))){
        forEntry.get(rt.getString("item_Sub")).get(rt.getString("revenueDate")).add(object2);
        }
        }
        }
        }
        }
        NumberFormat formatter = new DecimalFormat("#,##0.00");

        for(Entry<String, Map<String, ArrayList<Float>>>Items : forEntry.entrySet()){
        String da1 = "0.00", da2 = "0.00", da3 = "0.00", da4 = "0.00", da5 = "0.00", da6 = "0.00", da7 = "0.00", totalAmount = "0.00";
        float day1 = 0, day2 = 0, day3 = 0, day4 = 0, day5 = 0, day6 = 0, day7 = 0, total_amount;
        for(Entry<String, ArrayList<Float>> Dates :forEntry.get(Items.getKey()).entrySet() ){
        String reveItem = Items.getKey();
        if(Dates.getKey() == null ? DAY1.getText() == null : Dates.getKey().equals(DAY1.getText())){
        da1 = formatter.format(forEntry.get(Items.getKey()).get(DAY1.getText()).get(0));
        day1 = forEntry.get(Items.getKey()).get(DAY1.getText()).get(0);
        }else if(Dates.getKey() == null ? DAY2.getText() == null : Dates.getKey().equals(DAY2.getText())){
        da2 = formatter.format(forEntry.get(Items.getKey()).get(DAY2.getText()).get(0));
        day2 = forEntry.get(Items.getKey()).get(DAY2.getText()).get(0);
        }else if(Dates.getKey() == null ? DAY3.getText() == null : Dates.getKey().equals(DAY3.getText())){
        da3 = formatter.format(forEntry.get(Items.getKey()).get(DAY3.getText()).get(0));
        day3 = forEntry.get(Items.getKey()).get(DAY3.getText()).get(0);
        }else if(Dates.getKey() == null ? DAY4.getText() == null : Dates.getKey().equals(DAY4.getText())){
        da4 = formatter.format(forEntry.get(Items.getKey()).get(DAY4.getText()).get(0));
        day4 = forEntry.get(Items.getKey()).get(DAY4.getText()).get(0);
        }else if(Dates.getKey() == null ? DAY5.getText() == null : Dates.getKey().equals(DAY5.getText())){
        da5 = formatter.format(forEntry.get(Items.getKey()).get(DAY5.getText()).get(0));
        day5 = forEntry.get(Items.getKey()).get(DAY5.getText()).get(0);
        }else if(Dates.getKey() == null ? DAY6.getText() == null : Dates.getKey().equals(DAY6.getText())){
        da6 = formatter.format(forEntry.get(Items.getKey()).get(DAY6.getText()).get(0));
        day6 = forEntry.get(Items.getKey()).get(DAY6.getText()).get(0);
        }else if(Dates.getKey() == null ? DAY7.getText() == null : Dates.getKey().equals(DAY7.getText())){
        da7 = formatter.format(forEntry.get(Items.getKey()).get(DAY7.getText()).get(0));
        day7 = forEntry.get(Items.getKey()).get(DAY7.getText()).get(0);
        }
        }
        total_amount = day1 + day2 + day3 +day4 + day5 + day6 + day7 ;
        totalAmount = formatter.format(total_amount);
        REVENUE_ITEM.setCellValueFactory(data -> data.getValue().RevenueItemProperty());
        DAY1.setCellValueFactory(data -> data.getValue().DAY1Property());
        DAY2.setCellValueFactory(data -> data.getValue().DAY2Property());
        DAY3.setCellValueFactory(data -> data.getValue().DAY3Property());
        DAY4.setCellValueFactory(data -> data.getValue().DAY4Property());
        DAY5.setCellValueFactory(data -> data.getValue().DAY5Property());
        DAY6.setCellValueFactory(data -> data.getValue().DAY6Property());
        DAY7.setCellValueFactory(data -> data.getValue().DAY7Property());
        Total_amt.setCellValueFactory(data -> data.getValue().Total_AmountProperty());
        getReport = new GetReport(Items.getKey(), da1, da2, da3, da4, da5, da6, da7, totalAmount);
        WEEKLY_TABLE.getItems().add(getReport);
        }
        WEEKLY_TABLE.sort();
 ***/


/*
 //          Map<String, ArrayList<Float>> weekAmount = new HashMap<>();//HashMap to store revenue Amounts on their respective weeks
 Map<String, Map<String, ArrayList<Float>>> forEntry = new HashMap<>();//HashMap to store entries for tableview
 rowItems.forEach((rowItem) -> {
 forEntry.put(rowItem, new HashMap<>());
 });
 //          rowWeek.forEach((rowDates) -> {
 //              weekAmount.put(rowDates, new ArrayList<>());
 //          });
 try {
 for(String week : rowWeek) {
 for(String Item : rowItems) {
 float weekSum;
 weekSum = setWeekSum(cmbReportCent.getSelectionModel().getSelectedItem(), Item, cmbReportMonth.getSelectionModel().getSelectedItem(), week, cmbReportYear.getSelectionModel().getSelectedItem());
 //                      for(Entry<String, ArrayList<Float>> Dates : weekAmount.entrySet()){
 for(Entry<String, Map<String, ArrayList<Float>>>Items : forEntry.entrySet()){
 if (Items.getKey().equals(Item)  ){
 if(forEntry.containsKey(Item) && !forEntry.get(Item).containsKey(week)){
 forEntry.get(Item).put(week, new ArrayList<>());
 forEntry.get(Item).get(week).add(weekSum);
 }else if(forEntry.containsKey(Item) && forEntry.get(Item).containsKey(week)){
 forEntry.get(Item).get(week).add(weekSum);
 }
 };
 };
 //                      }

 }
 }
 }
 catch (SQLException ex) {
 Logger.getLogger(weeklyReportController.class.getName()).log(Level.SEVERE, null, ex);
 }
 NumberFormat formatter = new DecimalFormat("#,##0.00");

 for(Entry<String, Map<String, ArrayList<Float>>>Items : forEntry.entrySet()){
 String wek1 = "0.00", wek2 = "0.00", wek3 = "0.00", wek4 = "0.00", wek5 = "0.00", wek6 = "0.00",totalAmnt = "0.00";
 float wk1 = 0, wk2 = 0, wk3 = 0, wk4 = 0, wk5 = 0, wk6 = 0, total_amount;

 for(Entry<String, ArrayList<Float>> Dates :forEntry.get(Items.getKey()).entrySet() ){
 String reveItem = Items.getKey();
 System.out.println(reveItem+ "\n"+Items.getValue().get(Dates.getKey()));
 if(Dates.getKey() == null ? week1.getText() == null : Dates.getKey().equals(week1.getText())){
 wek1 = formatter.format(forEntry.get(Items.getKey()).get(week1.getText()).get(0));
 wk1 = forEntry.get(Items.getKey()).get(week1.getText()).get(0);
 }else if(Dates.getKey() == null ? week2.getText() == null : Dates.getKey().equals(week2.getText())){
 wek2 = formatter.format(forEntry.get(Items.getKey()).get(week2.getText()).get(0));
 wk2 = forEntry.get(Items.getKey()).get(week2.getText()).get(0);
 }else if(Dates.getKey() == null ? week3.getText() == null : Dates.getKey().equals(week3.getText())){
 wek3 = formatter.format(forEntry.get(Items.getKey()).get(week3.getText()).get(0));
 wk3 = forEntry.get(Items.getKey()).get(week3.getText()).get(0);
 }else if(Dates.getKey() == null ? week4.getText() == null : Dates.getKey().equals(week4.getText())){
 wek4 = formatter.format(forEntry.get(Items.getKey()).get(week4.getText()).get(0));
 wk4 = forEntry.get(Items.getKey()).get(week4.getText()).get(0);
 }else if(Dates.getKey() == null ? week5.getText() == null : Dates.getKey().equals(week5.getText())){
 wek5 = formatter.format(forEntry.get(Items.getKey()).get(week5.getText()).get(0));
 wk5 = forEntry.get(Items.getKey()).get(week5.getText()).get(0);
 } else if(Dates.getKey() == null ? week6.getText() == null : Dates.getKey().equals(week6.getText())){
 wek5 = formatter.format(forEntry.get(Items.getKey()).get(week6.getText()).get(0));
 wk5 = forEntry.get(Items.getKey()).get(week6.getText()).get(0);
 }
 }
 total_amount = wk1 + wk2 + wk3 + wk4 + wk5 + wk6;
 totalAmnt = formatter.format(total_amount);
 totwek1 += wk1; totWek1 = formatter.format(totwek1);
 totwek2 += wk2; totWek2 = formatter.format(totwek2);
 totwek3 += wk3; totWek3 = formatter.format(totwek3);
 totwek4 += wk4; totWek4 = formatter.format(totwek4);
 totwek5 += wk5; totWek5 = formatter.format(totwek5);
 totwek6 += wk6; totWek6 = formatter.format(totwek6);
 totweksum += total_amount; summation = formatter.format(totweksum);
 revenueITEM.setCellValueFactory(data -> data.getValue().RevenueItemProperty());
 week1.setCellValueFactory(data -> data.getValue().week1Property());
 week2.setCellValueFactory(data -> data.getValue().week2Property());
 week3.setCellValueFactory(data -> data.getValue().week3Property());
 week4.setCellValueFactory(data -> data.getValue().week4Property());
 week5.setCellValueFactory(data -> data.getValue().week5Property());
 week6.setCellValueFactory(data -> data.getValue().week6Property());
 totalAmount.setCellValueFactory(data -> data.getValue().Total_AmountProperty());
 GetReportgen getReport = new GetReportgen(Items.getKey(), wek1, wek2, wek3, wek4, wek5, wek6, totalAmnt);
 weekTable.getItems().add(getReport);
 lblWk1SumGen.setText(totWek1);   lblWk2SumGen.setText(totWek2);
 lblWk3SumGen.setText(totWek3);   lblWk4SumGen.setText(totWek4);
 lblWk5SumGen.setText(totWek5);   lblWk6SumGen.setText(totWek6);
 lblTotalSumGen.setText(summation);
 }
 *First trial code
 *
 wk1 = 0; wk2 = 0; wk3 = 0; wk4 = 0; wk5 = 0; wk6 = 0;
 while (rs.next()){
 //                        if (rs.getString("revenue_item").equals(items) && rs.getString("revenueWeek").equals(week)){
 switch (week){
 case "1":
 wk1 += rs.getFloat("revenueAmount");
 break;
 case "2":
 wk2 += rs.getFloat("revenueAmount");
 break;
 case "3":
 wk3 += rs.getFloat("revenueAmount");
 break;
 case "4":
 wk4 += rs.getFloat("revenueAmount");
 break;
 case "5":
 wk5 += rs.getFloat("revenueAmount");
 break;
 case "6":
 wk6 += rs.getFloat("revenueAmount");
 break;
 }
 System.out.println("True");
 //                            System.out.println(rs.getString("revenueAmount")+"\t"+wk1+"\t"+wk2+"\t"+wk3+"\t"+wk4+"\t"+wk5+"\t"+wk6);
 //                        }
 }
 finwk1 += wk1; finwk2 += wk2; finwk3 += wk3; finwk4 += wk4; finwk5 += wk5; finwk6 += wk6;
 wek1 = formatter.format(wk1); wek2 = formatter.format(wk2); wek3 = formatter.format(wk3); wek4 = formatter.format(wk4);
 wek5 = formatter.format(wk5); wek6 = formatter.format(wk6);
 total_amount = wk1 + wk2 + wk3 + wk4 + wk5 + wk6; fintotal_amount += total_amount;
 totalAmnt = formatter.format(total_amount);
 getReport = new GetReportgen(items, wek1, wek2, wek3, wek4, wek5, wek6, totalAmnt);
 weekTable.getItems().add(getReport);
 System.out.println(wk1+"\t"+wk2+"\t"+wk3+"\t"+wk4+"\t"+wk5+"\t"+wk6);

 *Second Trial
 *
 System.out.println(wk1+"\t"+wk2+"\t"+wk3+"\t"+wk4+"\t"+wk5+"\t"+wk6+"\t"+items);
 Map<String, Map<String, Float>> itemWeekSum = new HashMap<>();
 Map<String, Float> weekSum = new HashMap<>();
 weekSum.put("1", wk1); weekSum.put("2", wk2); weekSum.put("3", wk3); weekSum.put("4", wk4);
 weekSum.put("5", wk5); weekSum.put("6", wk6);
 itemWeekSum.put(items, weekSum);
 rs = stmnt.executeQuery();
 while (rs.next()){
 System.out.println(rs.getString("revenue_item"));
 if (items.equals(rs.getString("revenue_item"))){
 float amot= itemWeekSum.get(items).get(rs.getString("revenueWeek"));
 amot += rs.getFloat("revenueAmount");
 System.out.println(amot);
 itemWeekSum.get(items).put(rs.getString("revenueWeek"), amot);
 }
 if (rs.isAfterLast()){
 rs.beforeFirst();
 }
 }
 finwk1 += itemWeekSum.get(items).get("1"); finwk2 += itemWeekSum.get(items).get("2"); finwk3 += itemWeekSum.get(items).get("3"); finwk4 += itemWeekSum.get(items).get("4"); finwk5 += itemWeekSum.get(items).get("5"); finwk6 += itemWeekSum.get(items).get("6");
 wek1 = formatter.format(itemWeekSum.get(items).get("1")); wek2 = formatter.format(itemWeekSum.get(items).get("2")); wek3 = formatter.format(itemWeekSum.get(items).get("3")); wek4 = formatter.format(itemWeekSum.get(items).get("4"));
 wek5 = formatter.format(itemWeekSum.get(items).get("5")); wek6 = formatter.format(itemWeekSum.get(items).get("6"));
 total_amount = itemWeekSum.get(items).get("1") + itemWeekSum.get(items).get("2") + itemWeekSum.get(items).get("3") + itemWeekSum.get(items).get("4") + itemWeekSum.get(items).get("5") + itemWeekSum.get(items).get("6"); fintotal_amount += total_amount;
 totalAmnt = formatter.format(total_amount);
 getReport = new GetReportgen(items, wek1, wek2, wek3, wek4, wek5, wek6, totalAmnt);
 weekTable.getItems().add(getReport);
 System.out.println(wk1+"\t"+wk2+"\t"+wk3+"\t"+wk4+"\t"+wk5+"\t"+wk6);
 wk1 = 0; wk2 = 0; wk3 = 0; wk4 = 0; wk5 = 0; wk6 = 0;
 */


 /**
  * This is the first code for the sub-metro weeks
  *         ObservableList<String> commWeek =FXCollections.observableArrayList();
  *         ObservableList<String> valWeek =FXCollections.observableArrayList();
  *           String totWek1 = "0.00", totWek2 = "0.00", totWek3 = "0.00", totWek4 = "0.00", totWek5 = "0.00", totWek6 = "0.00", summation = "0.00";
  *           float commAmt1 = 0, commAmt2 = 0, commAmt3 = 0, commAmt4 = 0, commAmt5 = 0, commAmt6 = 0, val1 = 0, val2 = 0,
  *                   val3 = 0, val4 = 0, val5 = 0, val6 = 0, _18_1 = 0, _18_2 = 0, _18_3 = 0, _18_4 = 0, _18_5 = 0,
  *                   _18_6 = 0, netRev1 = 0, netRev2 = 0, netRev3 = 0, netRev4 = 0, netRev5 = 0, netRev6 = 0, cost1 = 0,
  *                   cost2 = 0, cost3 = 0, cost4 = 0, cost5 = 0, cost6 = 0, amtDue1 = 0, amtDue2 = 0, amtDue3 = 0, _18Tot = 0,
  *                   amtDue4 = 0, amtDue5 = 0, amtDue6 = 0, commTot = 0, valTot = 0, netTot = 0, costTot = 0, amtDTot = 0, totwek1 = 0, totwek2 = 0,totwek3 = 0, totwek4 = 0,
  *                     totwek5 = 0,totwek6 = 0,totweksum = 0;
  *               stmnt = con.prepareStatement(" SELECT `revenue_items`.`revenue_item`   FROM `daily_entries`,`revenue_items`,`revenue_centers` WHERE   `revenue_centers`.`CenterID` = `daily_entries`.`daily_revCenter` AND `revenue_centers`.`revenue_center` = '" + cmbReportCent.getSelectionModel().getSelectedItem() + "' AND `daily_entries`.`revenueMonth` = '" + cmbReportMonth.getSelectionModel().getSelectedItem() + "'AND `daily_entries`.`revenueYear` = '" + cmbReportYear.getSelectionModel().getSelectedItem() + "'AND `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` GROUP BY `revenue_items`.`revenue_item` ");
  * //        stmnt = con.prepareStatement(" SELECT `revenueItem` FROM `daily_entries` WHERE   `revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_revCenter` = '"+cmbReportCent.getSelectionModel().getSelectedItem()+"' AND `revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' GROUP BY `revenueItem`");
  *         ResultSet rs = stmnt.executeQuery();
  *         rowItems.clear();
  *         while(rs.next()){
  *             rowItems.add(rs.getString("revenue_item"));
  *         }
  *               stmnt = con.prepareStatement(" SELECT `revenueWeek` FROM `daily_entries`,`revenue_centers` WHERE `revenue_centers`.`CenterID` = `daily_entries`.`daily_revCenter` AND `revenue_centers`.`revenue_center` = '"+cmbReportCent.getSelectionModel().getSelectedItem()+"' AND `revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' AND `revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"'  GROUP BY `revenueWeek`");
  * //        stmnt = con.prepareStatement(" SELECT `revenueWeek` FROM `daily_entries` WHERE   `revenueMonth` = '"+cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_revCenter` = '"+cmbReportCent.getSelectionModel().getSelectedItem()+"' AND `revenueYear` = '"+cmbReportYear.getSelectionModel().getSelectedItem()+"' GROUP BY `revenueWeek`");
  *         rs = stmnt.executeQuery();
  *         rowWeek.clear();
  *         while(rs.next()){
  *             rowWeek.add(rs.getString("revenueWeek"));
  *         }
  *
  *         stmnt = con.prepareStatement(" SELECT `commission_week` FROM `commission_details`,`revenue_centers` WHERE   `commission_month` = '"+
  *                 cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `revenue_centers`.`CenterID` = `commission_details`.`commission_center` AND `revenue_centers`.`revenue_center` = '"+
  *                 cmbReportCent.getSelectionModel().getSelectedItem()+"' AND `commission_year` = '"+cmbReportYear.
  *                 getSelectionModel().getSelectedItem()+"' GROUP BY `commission_week`");
  *         rs = stmnt.executeQuery();
  *         commWeek.clear();
  *         while(rs.next()){
  *             commWeek.add(rs.getString("commission_week"));
  *         }
  *
  *         stmnt = con.prepareStatement(" SELECT `week` FROM `value_books_stock_record`,`revenue_centers` WHERE   `month` = '"+
  *                 cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `revenue_centers`.`CenterID` =`value_stock_revCenter` AND `revenue_centers`.`revenue_center` = '"+cmbReportCent.getSelectionModel().getSelectedItem()+"' AND `year` = '"+cmbReportYear.
  *                 getSelectionModel().getSelectedItem()+"' GROUP BY `week`");
  *         rs = stmnt.executeQuery();
  *         valWeek.clear();
  *         while(rs.next()){
  *             valWeek.add(rs.getString("week"));
  *         }
  * //          Map<String, ArrayList<Float>> weekAmount = new HashMap<>();//HashMap to store revenue Amounts on their respective weeks
  *         Map<String, Map<String, ArrayList<Float>>> forEntry = new HashMap<>();//HashMap to store entries for tableview
  *         rowItems.forEach((rowItem) -> {
  *             forEntry.put(rowItem, new HashMap<>());
  *         });
  * //          rowWeek.forEach((rowDates) -> {
  * //              weekAmount.put(rowDates, new ArrayList<>());
  * //          });
  *
  *         try {
  *             for(String week : rowWeek) {
  *                 for(String Item : rowItems) {
  *                     float weekSum;
  *                     weekSum = setWeekSum(cmbReportCent.getSelectionModel().getSelectedItem(), Item, cmbReportMonth.getSelectionModel().getSelectedItem(), week, cmbReportYear.getSelectionModel().getSelectedItem());
  * //                      for(Entry<String, ArrayList<Float>> Dates : weekAmount.entrySet()){
  *                     for(Entry<String, Map<String, ArrayList<Float>>>Items : forEntry.entrySet()){
  *                         if (Items.getKey().equals(Item)  ){
  *                             if(forEntry.containsKey(Item) && !forEntry.get(Item).containsKey(week)){
  *                                 forEntry.get(Item).put(week, new ArrayList<>());
  *                                 forEntry.get(Item).get(week).add(weekSum);
  *                             }else if(forEntry.containsKey(Item) && forEntry.get(Item).containsKey(week)){
  *                                 forEntry.get(Item).get(week).add(weekSum);
  *                             }
  *                         };
  *                     };
  * //                      }
  *
  *                 }
  *             }
  *         }
  *         catch (SQLException ex) {
  *             Logger.getLogger(weeklyReportController.class.getName()).log(Level.SEVERE, null, ex);
  *         }
  *         /**
  *          * Change of plans select commission amount and week then switch rs.getString("commission_week)
  *          * Same applies to value books select them and switch them with the weeks
  *
  *for(String week:commWeek){
          *String month=cmbReportMonth.getSelectionModel().getSelectedItem(),year=cmbReportYear.
          *getSelectionModel().getSelectedItem(),cent=cmbReportCent.getSelectionModel().getSelectedItem();
          *stmnt=con.prepareStatement("SELECT  `commission_amount` FROM `commission_details`,`revenue_centers` WHERE "+
          *"`commission_week` = '"+week+"' AND `commission_month` = '"+month+"' AND `commission_year` = '"+
          *year+"'AND `revenue_centers`.`CenterID` =`commission_center` AND `revenue_centers`.`revenue_center` = '"+cent+"'");
          *rs=stmnt.executeQuery();
          *while(rs.next()){
          *switch(week){
          *case"1":
          *commAmt1+=rs.getFloat("commission_amount");
          *break;
          *case"2":
          *commAmt2+=rs.getFloat("commission_amount");
          *break;
          *case"3":
          *commAmt3+=rs.getFloat("commission_amount");
          *break;
          *case"4":
          *commAmt4+=rs.getFloat("commission_amount");
          *break;
          *case"5":
          *commAmt5+=rs.getFloat("commission_amount");
          *break;
          *case"6":
          *commAmt6+=rs.getFloat("commission_amount");
          *break;
          *}
          *}
          *}
          *for(String week:valWeek){
          *String month=cmbReportMonth.getSelectionModel().getSelectedItem(),year=cmbReportYear.
          *getSelectionModel().getSelectedItem(),cent=cmbReportCent.getSelectionModel().getSelectedItem();
          *stmnt=con.prepareStatement("SELECT  `purchase_amount` FROM  `value_books_stock_record`,`revenue_centers` WHERE `week` = '"+week+"' AND`year` = '"
          *+year+"' AND `month` = '"+month+"'AND `revenue_centers`.`CenterID` =`value_stock_revCenter` AND `revenue_centers`.`revenue_center` = '"+cent+"'");
          *rs=stmnt.executeQuery();
          *while(rs.next()){
          *switch(week){
          *case"1":
          *val1+=rs.getFloat("purchase_amount");
          *break;
          *case"2":
          *val2+=rs.getFloat("purchase_amount");
          *break;
          *case"3":
          *val3+=rs.getFloat("purchase_amount");
          *break;
          *case"4":
          *val4+=rs.getFloat("purchase_amount");
          *break;
          *case"5":
          *val5+=rs.getFloat("purchase_amount");
          *break;
          *case"6":
          *val6+=rs.getFloat("purchase_amount");
          *break;
          *}
          *}}
          *
          *for(String week:commWeek){
          *switch(week){
          *case"1":
          *_18_1=(18*commAmt1)/100;
          *break;
          *case"2":
          *_18_2=(18*commAmt2)/100;
          *break;
          *case"3":
          *_18_3=(18*commAmt3)/100;
          *break;
          *case"4":
          *_18_4=(18*commAmt4)/100;
          *break;
          *case"5":
          *_18_5=(18*commAmt5)/100;
          *break;
          *case"6":
          *_18_6=(18*commAmt6)/100;
          *break;
          *}
          *}
          *NumberFormat formatter=new DecimalFormat("#,##0.00");
          *for(Entry<String, Map<String, ArrayList<Float>>>Items:forEntry.entrySet()){
        *String wek1="0.00",wek2="0.00",wek3="0.00",wek4="0.00",wek5="0.00",wek6="0.00",totalAmnt="0.00";
        *float wk1=0,wk2=0,wk3=0,wk4=0,wk5=0,wk6=0,total_amount;
        *for(Entry<String, ArrayList<Float>>Dates:forEntry.get(Items.getKey()).entrySet()){
        *String reveItem=Items.getKey();
        *if(Dates.getKey()==null?week1Sub.getText()==null:Dates.getKey().equals(week1Sub.getText())){
        *wek1=formatter.format(forEntry.get(Items.getKey()).get(week1Sub.getText()).get(0));
        *wk1=forEntry.get(Items.getKey()).get(week1Sub.getText()).get(0);
        *}
        *else if(Dates.getKey()==null?week2Sub.getText()==null:Dates.getKey().equals(week2Sub.getText())){
        *wek2=formatter.format(forEntry.get(Items.getKey()).get(week2Sub.getText()).get(0));
        *wk2=forEntry.get(Items.getKey()).get(week2Sub.getText()).get(0);
        *}
        *else if(Dates.getKey().equals("3")){
        *wk3=forEntry.get(Items.getKey()).get("3").get(0);
        *wek3=formatter.format(wk3);
        *}
        *else if(Dates.getKey().equals("4")){
        *wk4=forEntry.get(Items.getKey()).get("4").get(0);
        *wek4=formatter.format(wk4);
        *}
        *else if(Dates.getKey().equals("5")){
        *wek5=formatter.format(forEntry.get(Items.getKey()).get("5").get(0));
        *wk5=forEntry.get(Items.getKey()).get("5").get(0);
        *}
        *else if(Dates.getKey().equals("6")){
        *wek6=formatter.format(forEntry.get(Items.getKey()).get("6").get(0));
        *wk6=forEntry.get(Items.getKey()).get("6").get(0);
        *}
        *}
        *
        *revenueITEMSub.setCellValueFactory(data->data.getValue().RevenueItemProperty());
        *week1Sub.setCellValueFactory(data->data.getValue().week1Property());
        *week2Sub.setCellValueFactory(data->data.getValue().week2Property());
        *week3Sub.setCellValueFactory(data->data.getValue().week3Property());
        *week4Sub.setCellValueFactory(data->data.getValue().week4Property());
        *week5Sub.setCellValueFactory(data->data.getValue().week5Property());
        *week6Sub.setCellValueFactory(data->data.getValue().week6Property());
        *totalAmountSub.setCellValueFactory(data->data.getValue().Total_AmountProperty());
        *
        *total_amount=wk1+wk2+wk3+wk4+wk5+wk6;
        *totalAmnt=formatter.format(total_amount);
        *totwek1+=wk1;totWek1=formatter.format(totwek1);
        *totwek2+=wk2;totWek2=formatter.format(totwek2);
        *
        *totwek3+=wk3;totWek3=formatter.format(totwek3);
        *
        *totwek4+=wk4;totWek4=formatter.format(totwek4);
        *
        *totwek5+=wk5;totWek5=formatter.format(totwek5);
        *
        *totwek6+=wk6;totWek6=formatter.format(totwek6);
        *
        *totweksum+=total_amount;summation=formatter.format(totweksum);
        *
        *GetReportgen getReport=new GetReportgen(Items.getKey(),wek1,wek2,wek3,wek4,wek5,wek6,totalAmnt);
        *weekTableSub.getItems().add(getReport);
        *System.out.println(wek3+"\n"+wek4);
        *}
        *System.out.println(forEntry);
        *lblWk1SumSub.setText(totWek1);lblWk2SumSub.setText(totWek2);
        *lblWk3SumSub.setText(totWek3);lblWk4SumSub.setText(totWek4);
        *lblWk5SumSub.setText(totWek5);lblWk6SumSub.setText(totWek6);
        *lblTotalSumSub.setText(summation);
        *
        *cost1=val1+_18_1;
        *netRev1=totwek1-cost1;
        *amtDue1=netRev1/2;
        *cost2=val2+_18_2;
        *netRev2=totwek2-cost2;
        *amtDue2=netRev2/2;
        *cost3=(val3+(_18_3));
        *netRev3=totwek3-cost3;
        *amtDue3=netRev3/2;
        *cost4=(val4+(_18_4));
        *netRev4=totwek4-cost4;
        *amtDue4=netRev4/2;
        *cost5=(val5+(_18_5));
        *netRev5=totwek5-cost5;
        *amtDue5=netRev5/2;
        *cost6=(val6+(_18_6));
        *netRev6=totwek6-cost6;
        *amtDue6=netRev6/2;
        *commTot=(commAmt1+commAmt2+commAmt3+commAmt4+commAmt5+commAmt6);
        *amtDTot=(amtDue5+amtDue1+amtDue6+amtDue2+amtDue3+amtDue4);
        *valTot=(val1+val2+val3+val4+val5+val6);
        *_18Tot=(_18_1+_18_2+_18_3+_18_4+_18_5+_18_6);
        *netTot=(netRev1+netRev2+netRev3+netRev4+netRev5+netRev6);
        *costTot=(cost1+cost2+cost3+cost4+cost5+cost6);
        *lblAmtDueKMA1.setText(getFunctions.getAmount(Float.toString(amtDue1)));lblAmtDueKMA2.setText(getFunctions.getAmount(Float.toString(amtDue2)));
        *lblAmtDueKMA3.setText(getFunctions.getAmount(Float.toString(amtDue3)));lblAmtDueKMA4.setText(getFunctions.getAmount(Float.toString(amtDue4)));
        *lblAmtDueKMA5.setText(getFunctions.getAmount(Float.toString(amtDue5)));lblAmtDueKMA6.setText(getFunctions.getAmount(Float.toString(amtDue6)));
        *lblAmtDueKMATot.setText(getFunctions.getAmount(Float.toString(amtDTot)));lblAmtDueSub1.setText(getFunctions.getAmount(Float.toString(amtDue1)));
        *lblAmtDueSub2.setText(getFunctions.getAmount(Float.toString(amtDue2)));lblAmtDueSub3.setText(getFunctions.getAmount(Float.toString(amtDue3)));
        *lblAmtDueSub4.setText(getFunctions.getAmount(Float.toString(amtDue4)));lblAmtDueSub5.setText(getFunctions.getAmount(Float.toString(amtDue5)));
        *lblAmtDueSub6.setText(getFunctions.getAmount(Float.toString(amtDue6)));lblAmtDueSubTot.setText(getFunctions.getAmount(Float.toString(amtDTot)));
        *lblCCAmount1.setText(getFunctions.getAmount(Float.toString(commAmt1)));lblCCAmount2.setText(getFunctions.getAmount(Float.toString(commAmt2)));
        *lblCCAmount3.setText(getFunctions.getAmount(Float.toString(commAmt3)));lblCCAmount4.setText(getFunctions.getAmount(Float.toString(commAmt4)));
        *lblCCAmount5.setText(getFunctions.getAmount(Float.toString(commAmt5)));lblCCAmount6.setText(getFunctions.getAmount(Float.toString(commAmt6)));
        *lblCCAmountTot.setText(getFunctions.getAmount(Float.toString(commTot)));lblCostValueBooks1.setText(getFunctions.getAmount(Float.toString(val1)));
        *lblCostValueBooks2.setText(getFunctions.getAmount(Float.toString(val2)));lblCostValueBooks3.setText(getFunctions.getAmount(Float.toString(val3)));
        *lblCostValueBooks4.setText(getFunctions.getAmount(Float.toString(val4)));lblCostValueBooks5.setText(getFunctions.getAmount(Float.toString(val5)));
        *lblCostValueBooks6.setText(getFunctions.getAmount(Float.toString(val6)));lblCostValueBooksTot.setText(getFunctions.getAmount(Float.toString(valTot)));
        *lblCommission1.setText(getFunctions.getAmount(Float.toString(_18_1)));lblCommission2.setText(getFunctions.getAmount(Float.toString(_18_2)));
        *lblCommission3.setText(getFunctions.getAmount(Float.toString(_18_3)));lblCommission4.setText(getFunctions.getAmount(Float.toString(_18_4)));
        *lblCommission5.setText(getFunctions.getAmount(Float.toString(_18_5)));lblCommission6.setText(getFunctions.getAmount(Float.toString(_18_6)));
        *lblCommissionTot.setText(getFunctions.getAmount(Float.toString(_18Tot)));lblDiff1.setText(getFunctions.getAmount(Float.toString(cost1)));
        *lblDiff2.setText(getFunctions.getAmount(Float.toString(cost2)));lblDiff3.setText(getFunctions.getAmount(Float.toString(cost3)));
        *lblDiff4.setText(getFunctions.getAmount(Float.toString(cost4)));lblDiff5.setText(getFunctions.getAmount(Float.toString(cost5)));
        *lblDiff6.setText(getFunctions.getAmount(Float.toString(cost6)));lblDiffTot.setText(getFunctions.getAmount(Float.toString(costTot)));
        *lblNetRevenue1.setText(getFunctions.getAmount(Float.toString(netRev1)));
        *lblNetRevenue2.setText(getFunctions.getAmount(Float.toString(netRev2)));lblNetRevenue3.setText(getFunctions.getAmount(Float.toString(netRev3)));
        *lblNetRevenue4.setText(getFunctions.getAmount(Float.toString(netRev4)));lblNetRevenue5.setText(getFunctions.getAmount(Float.toString(netRev5)));
        *lblNetRevenue6.setText(getFunctions.getAmount(Float.toString(netRev6)));lblNetRevenueTot.setText(getFunctions.getAmount(Float.toString(netTot)));
  *
  System.out.println(commAmt1+"\t"+commAmt2+"\t"+commAmt3+"\t"+commAmt4+"\t"+commAmt5+"\t"+commAmt6+"\t"+val1+"\t"+val2+"\t"+val3+"\t"+val4+"\t"+val5+"\t"+val6+"\t"+_18_1+"\t"+_18_2+"\t"+_18_3+"\t"+_18_4+"\t"+_18_5+"\t"+_18_6);
  public Float setWeekSum(String Center, String item, String month, String week, String Year) throws SQLException{
  float totalAmunt;
  if (Center.equals("PROPERTY RATE ALL")){
  stmnt = con.prepareStatement(" SELECT `revenueAmount`   FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `revenue_item` = '"+item+"' AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `revenue_centers`.`revenue_category` = 'PROPERTY RATE SECTION' AND `revenueYear` = '"+Year+"' AND  `revenueMonth` = '"+month+"' AND `revenueWeek` = '"+week+"'  ");
  }else if (Center.equals("PROPERTY RATE SUB-METROS")){
  stmnt = con.prepareStatement(" SELECT `revenueAmount`   FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `revenue_item` = '"+item+"' AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `daily_entries`.`daily_revCenter` = 'K0201' OR `daily_entries`.`daily_revCenter` = 'K0202' OR `daily_entries`.`daily_revCenter` = 'K0203' OR `daily_entries`.`daily_revCenter` = 'K0204' OR `daily_entries`.`daily_revCenter` = 'K0205' AND `revenueYear` = '"+Year+"' AND  `revenueMonth` = '"+month+"' AND `revenueWeek` = '"+week+"'  ");
  }else {
  stmnt = con.prepareStatement(" SELECT `revenueAmount`   FROM `revenue_centers`,`daily_entries`, `revenue_items` WHERE `revenue_items`.`revenue_item_ID` = `daily_entries`.`revenueItem` AND `revenue_item` = '"+item+"' AND `daily_entries`.`daily_revCenter` = `revenue_centers`.`CenterID` AND `revenue_centers`.`revenue_center` = '"+Center+"' AND `revenueYear` = '"+Year+"' AND  `revenueMonth` = '"+month+"' AND `revenueWeek` = '"+week+"'  ");
  }
  ResultSet rs = stmnt.executeQuery();
  ObservableList<Float> Amount = FXCollections.observableArrayList();//List to Store revenue items which have entries for the specified week
  while(rs.next()){//looping through the retrieved revenueItems result set
  Amount.add(rs.getFloat("revenueAmount"));
  }
  totalAmunt = 0;
  for(Float n : Amount){
  totalAmunt += n;
  }
  return totalAmunt;
  }
 */




//      private void getWeekly() throws SQLException{
//        stmnt = con.prepareStatement(" SELECT `revenueWeek` FROM `daily_entries` WHERE   `revenueMonth` = '"+
//                cmbReportMonth.getSelectionModel().getSelectedItem()+"' AND `daily_revCenter` = '"+
//                cmbReportCent.getSelectionModel().getSelectedItem()+"' AND `revenueYear` = '"+cmbReportYear.
//                getSelectionModel().getSelectedItem()+"' GROUP BY `revenueWeek`");
//        ResultSet rs = stmnt.executeQuery();
//        ResultSetMetaData meta = rs.getMetaData();
//        int col = meta.getColumnCount();
//        rowWeek.clear();
//        while(rs.next()){
//            for(int i=1; i<=col; i++){
//                if(i == 1){
//
//                    rowWeek.add(rs.getObject(i).toString());
//
//                }
//            }
//        }
//        week1.setText("WEEK");
//        week2.setText("WEEK");
//        week3.setText("WEEK");
//        week4.setText("WEEK");
//        week5.setText("WEEK");
//        week6.setText("WEEK");
//        System.out.println(rowWeek.size());
//        int rowSize = rowWeek.size();
//        switch(rowSize){
//            case 1:
//                week1.setText(rowWeek.get(0));
//                break;
//            case 2:
//                week1.setText(rowWeek.get(0));
//                week2.setText(rowWeek.get(1));
//                break;
//            case 3:
//                week1.setText(rowWeek.get(0));
//                week2.setText(rowWeek.get(1));
//                week3.setText(rowWeek.get(2));
//                break;
//            case 4:
//                week1.setText(rowWeek.get(0));
//                week2.setText(rowWeek.get(1));
//                week3.setText(rowWeek.get(2));
//                week4.setText(rowWeek.get(3));
//                break;
//            case 5:
//                week1.setText(rowWeek.get(0));
//                week2.setText(rowWeek.get(1));
//                week3.setText(rowWeek.get(2));
//                week4.setText(rowWeek.get(3));
//                week5.setText(rowWeek.get(4));
//                break;
//            case 6:
//                week1.setText(rowWeek.get(0));
//                week2.setText(rowWeek.get(1));
//                week3.setText(rowWeek.get(2));
//                week4.setText(rowWeek.get(3));
//                week5.setText(rowWeek.get(4));
//                week6.setText(rowWeek.get(5));
//                break;
//
//        }
//
//
//
//   }